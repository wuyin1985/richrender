/* automatically generated by rust-bindgen 0.59.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: bool = false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type CEffekseerRenderer = *mut ::std::os::raw::c_void;
pub type CEffekseerManager = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShareTexture {
    pub image: *mut ::std::os::raw::c_void,
    pub view: *mut ::std::os::raw::c_void,
    pub format: i32,
    pub width: i32,
    pub height: i32,
}
#[test]
fn bindgen_test_layout_ShareTexture() {
    assert_eq!(
        ::std::mem::size_of::<ShareTexture>(),
        32usize,
        concat!("Size of: ", stringify!(ShareTexture))
    );
    assert_eq!(
        ::std::mem::align_of::<ShareTexture>(),
        8usize,
        concat!("Alignment of ", stringify!(ShareTexture))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ShareTexture>())).image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ShareTexture),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ShareTexture>())).view as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ShareTexture),
            "::",
            stringify!(view)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ShareTexture>())).format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ShareTexture),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ShareTexture>())).width as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ShareTexture),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ShareTexture>())).height as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ShareTexture),
            "::",
            stringify!(height)
        )
    );
}
extern "C" {
    pub fn RunWithPlatform();
}
extern "C" {
    pub fn Startup(graphic: *mut ::std::os::raw::c_void, renderPass: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn UpdateFrame(renderPass: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn Shutdown();
}
extern "C" {
    pub fn StartupWithExternalVulkan(
        vk_device: *mut ::std::os::raw::c_void,
        vk_phy_device: *mut ::std::os::raw::c_void,
        vk_queue: *mut ::std::os::raw::c_void,
        vk_command_pool: *mut ::std::os::raw::c_void,
        color: ShareTexture,
        depth: ShareTexture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TestCall(input: i32) -> i32;
}
